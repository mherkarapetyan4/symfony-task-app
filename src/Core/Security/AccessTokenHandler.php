<?php

declare(strict_types=1);

namespace App\Core\Security;

use App\Core\Service\JwtManager;
use App\Module\Auth\V1\Domain\Repository\IAuthUserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException;
use Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\Authenticator\Passport\SelfValidatingPassport;

class AccessTokenHandler extends AbstractAuthenticator
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        private readonly IAuthUserRepository    $repository,
        private readonly JwtManager             $jwtManager
    )
    {
    }

    public function createToken(Passport $passport, string $firewallName): TokenInterface
    {
        return parent::createToken($passport, $firewallName); // TODO: Change the autogenerated stub
    }

    public function supports(Request $request): ?bool
    {
        return $request->headers->has('Authorization');
    }

    public function authenticate(Request $request): Passport
    {
        $token = $this->extractToken($request);

        if (null === $token || !$this->jwtManager->isValid($token)) {
            throw new CustomUserMessageAuthenticationException('Auth token not found (header: "{{ header }}")', [
                '{{ header }}' => "Authorization",
            ]);
        }

        $id = $this->jwtManager->getUserIdFromToken($token);
        $user = $this->repository->findByIdAndToken(id: $id, token: $token);

        if (!$user) {
            throw new CustomUserMessageAuthenticationException('Auth token not found (header: "{{ header }}")', [
                '{{ header }}' => "Authorization",
            ]);
        }

        return new SelfValidatingPassport(new UserBadge($token));
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
        return null;
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response
    {
        return new JsonResponse(['error' => 'Authentication failed'], Response::HTTP_UNAUTHORIZED);

    }

    private function extractToken(Request $request): ?string
    {
        $token = $request->headers->get('Authorization');
        if ($token && strpos($token, 'Bearer ') === 0) {
            return substr($token, 7);
        }

        return null;
    }
}